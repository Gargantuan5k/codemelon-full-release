CODEMELON -- Guide to the syntax, and how to code in CodeMelon

1. Datatypes and Variable Assignment:
    • There are 4 major datatypes in CodeMelon:
    a) Number (includes integers, floats, long etc)
    b) String
    c) Boolean (True or False, represented by Number(1) and Number(0) each. (Use keyword True or False)
    d) NullType (Represented by Number(0) (Use keyword Null)
    ** Dedicated datatypes for Boolean and NullType may be added later.

    • CodeMelon also supports lists and functions.

    Variables can hold any datatype. Use the var keyword, followed by variable name and '=' sign followed by the value to assign to a variable.
    There are no specific keywords for specific datatypes.
    For example: var x = 10  <-- Assigns Number(10) to x
                 var y = 'Lorem'  <-- Assigns String('Lorem') to y


2. Built-ins:
    • The print() statement prints to the console. Can hold any datatype, variable or expression as arguments. Concatenate strings using '+'
    • The input() statement takes user input, can assign to a variable using 'var'. The input_int() statement takes user input as a Number.
        -> var userin1 = input('Enter a string')
        -> var userin2 = input_int('Enter a number')

        input() and input_int() take String('message') as an argument. The message may be any datatype. To have an empty message, use '' (empty string) as the argument.
            For example:  var x = input('')

    ♦ Type-Specific functions:
        • is_num()/is_str()/is_list()/is_func() returns True if the specified argument is of the type given in the function.
        • append(list_name, value) appends arg value to arg list_name
        • pop(list_name) removes and returns the last item in the specified list
        • extend(list1, list2) adds all items of list2 to the end of list1
        • len(expr) returns the length of the given argument (Must be List or String)

    ♦ Math functions:
        • randint(start, end) returns a random integer between start and end (Both included). Both args must be or return type Number.
        • math_sqrt(value) returns the square root of the given value or math expression. Arg must be or return a Number.
        • math_floor(value) returns the greatest integer Number that is <= the given floating point value. Arg must be or return a Number.
        • math_ceil(value) returns the greatest integer Number that is >= the given floating point value. Arg must be or return a Number.
            -> For math_ceil() and math_floor(), the given argument is used as a float. Therefore, math_floor(1.2) will return 1 and math_floor(1) will also return 1.
            -> Number(1) (Arg for math_floor() is used as Number(1.0) (Floating-point)
        • math_floordiv(num1, num2) returns the quotient obtained on dividing num1 by num2. Both args must be or return Number.
        • mod(num1, num2) returns the remainder obtained on dividing num1 by num2. Both args must be or return Number.
        • math_sin(value) returns the sine of Number(value).
        • math_cos(value) returns the cosine of Number(value).
        • math_tan(value) returns the tangent of Number(value).

    ♦ Misc.:
        • cls() or clear() clears the output screen.
            ** FOR cls() and clear(): These functions will not do anything as of now, since the Python Console cannot yet be cleared by the os module. Run shell.py in cmd prompt or terminal to
            circumvent this problem.
        • run('filename.mln') cannot be used inside of a running program file. It must be used in the Shell console to run CodeMelon code from an external file.
          The filename must be presented as a string (wrapped in '' or "") and must have the .mln extension to avoid a Runtime Error.
          The absolute path to the file must be specified if the file is not in the same folder as CodeMelon and CodeMelon has not been added to the PATH environment variable.

    ♦ Syntaxes for if/for/while/functions:
        • For if statements, the syntax is as follows:
        if condition then
            <expr/statements>
        elif condition then
            <expr/statements>
        elif condition then
            <expr/statements>
        else
            <expr/statements>
            end

        ** You can use the elif statement as many times as required.

        • For while loops, the syntax is as follows:
            while condition then
                <expr/statements>
                break/continue  $ Optional
                end

        • For for loops, the syntax is as follows:
            for variable = <start> to <end> then
                <expr/statements>
                end

        • For function definitions, the syntax is as follows:
            func func_name(param1, param2)
                <expr/statements>
                return <value>  $ Optional
                end
        • For single-line functions:
            func func_name(param1, param2) -> <expr/statements>
        • For all other block statements, simply do not use the 'end' keyword at the end of the single-line statement.

        ** The 'end' keyword denotes the end of a statement block and can be called at any point inside the block.

3. Comments:
    CodeMelon supports both single-line and multi-line comments.
    • Single line comments are defined using  $  followed by the comment.
    • Multiline comments are wrapped in # #

    For example:
        $ This is a single-line comment
        # This is a
          Multiline
          comment #


4. Conventions and enhancement:
    CodeMelon uses the joined_lower naming convention for all datatypes. Additionally, Python's PEP-8 rules shall be followed wherever applicable and whenever they do not override
    CodeMelon's own rules.

    ** Tabs and spaces are ignored wherever possible, but should be used to improve readability.


     © Siddharth Vivek, 2020
     Short Copyright declaration: CodeMelon is completely free and open-source software. This means that any and all users are permitted to access, modify and
     redistribute CodeMelon, its source code, and any other attached documents (when applicable), under the following condition(s)
     (Software refers to CodeMelon for the purposes off this notice)
     a) The user(s)/distributor(s) shall not gain any material or monetary profit whatsoever, in cash or in kind from the distribution, modification, usage or access of CodeMelon or any related
        software while this copyright notice holds and while the distribution remains largely similar to the original software, without prior permission from the developer(s) of the original
        software.
     b) This copyright notice, along with credit to the original developer(s) of the original software, shall be included in any and all versions and distributions of CodeMelon software.